package com.mageshowdown.gameclient;

import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.mageshowdown.gamelogic.GameScreen;
import com.mageshowdown.gamelogic.GameWorld;
import com.mageshowdown.gameserver.ServerRound;
import com.mageshowdown.packets.Network;
import org.omg.CORBA.OBJECT_NOT_EXIST;

public class ClientListener extends Listener {

    private GameClient myClient=GameClient.getInstance();

    private GameScreen gameScreen;

    public ClientListener(GameScreen gameScreen) {
        this.gameScreen=gameScreen;
    }

    @Override
    public void connected(Connection connection) {
    }

    @Override
    public void received(Connection connection, Object object) {
        handleLoginServerRequest(connection,object);
        handleNewPlayerSpawned(connection,object);
        handleUpdateCharacterStates(connection,object);
        handleShootProjectile(connection,object);
        handleProjectileCollided(connection,object);
        handlePlayerDisconnected(connection,object);
        handleCurrentMap(connection,object);
        handlePlayerDead(connection,object);
    }

    private void handleLoginServerRequest(Connection connection,Object object){
        if(object instanceof Network.LoginRequest){
            Network.LoginRequest packet=((Network.LoginRequest) object);

            packet.user=myClient.getUserName();
            myClient.sendTCP(packet);
        }
    }

    private void handleUpdateCharacterStates(Connection connection, Object object) {
        if(object instanceof Network.CharacterStates){
            Network.CharacterStates packet=((Network.CharacterStates) object);
            /*
             * In order to make sure the box2d world doesnt get locked when we synchronize the
             * velocity and position of a body, we have to queue these assignments
             * and do them after the world has stepped;
             */
            for(Network.OneCharacterState x:packet.playerStates){
                ClientPlayerCharacter pc;
                //if the character is mine i update my position
                if(x.id==connection.getID()){
                    pc=gameScreen.getGameStage().getPlayerCharacter();
                }
                else{
                    pc=gameScreen.getGameStage().getOtherPlayers().get(x.id);
                }

                pc.setQueuedPos(x.pos);
                pc.setQueuedVel(x.linVel);
                pc.setHealth(x.health);
                pc.setScore(x.score);
                pc.setDmgImmune(x.dmgImmune);
            }
        }
    }

    private void handleNewPlayerSpawned(Connection connection, Object object){
        if(object instanceof Network.NewPlayerSpawned){
            Network.NewPlayerSpawned packet=(Network.NewPlayerSpawned)object;

            //the position generated by the spawn function is for box2d world coordinates so it needs to be converted
            packet.pos= GameWorld.convertWorldToPixels(packet.pos);
            ClientRound.getInstance().setTimePassed(packet.roundTimePassed);
            if(connection.getID()==packet.id) {
                gameScreen.getGameStage().spawnMyPlayerCharacter(packet.pos, packet.userName);
                gameScreen.getGameStage().getPlayerCharacter().setMyPlayer(true);
            }else gameScreen.getGameStage().spawnOtherPlayer(packet.id,packet.pos,packet.userName);
        }
    }

    private void handleShootProjectile(Connection connection, Object object){
        if(object instanceof Network.ShootProjectile){
            Network.ShootProjectile packet=(Network.ShootProjectile)object;

            gameScreen.getGameStage().getOtherPlayers().get(packet.id).getMyWeapon().shoot(packet.dir,packet.rot,packet.id);
        }
    }

    private void handleProjectileCollided(Connection connection, Object object){
        if(object instanceof Network.ProjectileCollided){
            Network.ProjectileCollided packet=(Network.ProjectileCollided)object;


            //if the bullet is the client's player's
            if(packet.ownerId==connection.getID()){
                gameScreen.getGameStage().getPlayerCharacter().getMyWeapon().projectileHasCollided(packet.projId);
            }
            //if the bullet is some other client's player's
            else{
                gameScreen.getGameStage().getOtherPlayers().get(packet.ownerId).getMyWeapon().projectileHasCollided(packet.projId);
            }
        }
    }

    private void handlePlayerDisconnected(Connection connection, Object object){
        if(object instanceof Network.PlayerDisconnected){
            Network.PlayerDisconnected packet=(Network.PlayerDisconnected)object;

            gameScreen.getGameStage().removePlayerCharacter(packet.id);
        }
    }

    private void handleCurrentMap(Connection connection, Object object){
        if(object instanceof Network.CurrentMap){
            Network.CurrentMap packet=(Network.CurrentMap)object;

            gameScreen.getGameStage().getGameLevel().setMap(packet.nr);
            gameScreen.getGameStage().getGameLevel().changeLevel();
        }
    }

    private void handlePlayerDead(Connection connection, Object object){
        if (object instanceof Network.PlayerDead){
            Network.PlayerDead packet=(Network.PlayerDead)object;

            if(packet.id==GameClient.getInstance().getID()){
                System.out.println("you died you suck");
            }else{
                System.out.println(packet.id+" died he sucks");
            }
        }
    }
}

