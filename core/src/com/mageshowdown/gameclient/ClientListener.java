package com.mageshowdown.gameclient;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.math.Vector2;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.mageshowdown.gamelogic.GameScreen;
import com.mageshowdown.gamelogic.GameWorld;
import com.mageshowdown.gamelogic.Orb;
import com.mageshowdown.packets.Network;

public class ClientListener extends Listener {

    final static float OWN_VELOCITY_UPDATE_TIME = 2f;
    static float ownVelocityUpdateTimer = 0f;
    static boolean updateOwnVelocity = false;

    public static void updateTimer() {
        if (ownVelocityUpdateTimer >= OWN_VELOCITY_UPDATE_TIME) {
            updateOwnVelocity = true;
            ownVelocityUpdateTimer = 0f;
        } else ownVelocityUpdateTimer += Gdx.graphics.getDeltaTime();
    }

    private GameClient myClient = GameClient.getInstance();

    @Override
    public void connected(Connection connection) {
    }

    @Override
    public void received(Connection connection, Object object) {
        handleLoginServerRequest(connection, object);
        handleNewPlayerSpawned(connection, object);
        handleSendBodyStates(connection, object);
        handleSendCharacterStates(connection, object);
        handleShootProjectile(connection, object);
        handlePlayerDisconnected(connection, object);
        handleCurrentMap(connection, object);
        handlePlayerDead(connection, object);
        handleSwitchOrbs(connection, object);
        handlePlantBomb(connection, object);
        handleMoveKeyUp(connection, object);
        handleMoveKeyDown(connection, object);
    }

    @Override
    public void disconnected(Connection connection) {
        super.disconnected(connection);
        System.out.println("got blasted in the ass");
    }

    private void handleLoginServerRequest(Connection connection, Object object) {
        if (object instanceof Network.LoginRequest && !myClient.isLogged()) {
            Network.LoginRequest packet = ((Network.LoginRequest) object);

            //we want to be sure the round timers are synchronized when the game starts
            if (packet.isRoundOver) {
                ClientRound.getInstance().stop();
                ClientRound.getInstance().setTimePassedRoundFinished(packet.roundTimer);
            } else {
                ClientRound.getInstance().start();
                ClientRound.getInstance().setTimePassed(packet.roundTimer);
            }

            Gdx.app.log("connection_event", "received login request!");
            packet.user = myClient.getUserName();
            myClient.setLogged(true);
            myClient.sendTCP(packet);
        }
    }

    private void handleSendBodyStates(Connection connection, Object object) {
        if (object instanceof Network.BodyStates) {
            Network.BodyStates packet = ((Network.BodyStates) object);
            /*
             * In order to make sure the box2d WORLD doesnt get locked when we synchronize the
             * position of a body, we have to queue these assignments
             * and do them after the WORLD has stepped;
             */
            for (Network.OneBodyState bodyState : packet.states) {
                ClientPlayerCharacter playerCharacter = getPlayerCharacterById(connection.getID(), bodyState.id);
                if (playerCharacter != null) {
                    playerCharacter.setQueuedPos(bodyState.pos);
                }
            }
        }
    }

    private void handleSendCharacterStates(Connection connection, Object object) {
        if (object instanceof Network.CharacterStates) {
            Network.CharacterStates packet = ((Network.CharacterStates) object);
            for (Network.OneCharacterState characterState : packet.states) {
                ClientPlayerCharacter playerCharacter = getPlayerCharacterById(connection.getID(), characterState.id);

                if (playerCharacter != null) {
                    //if the player wasnt frozen before and now is means they just became that way
                    if (!playerCharacter.isFrozen() && characterState.frozen)
                        playerCharacter.hasJustFrozen();

                    playerCharacter.setHealth(characterState.health);
                    playerCharacter.setEnergyShield(characterState.energyShield);
                    playerCharacter.setScore(characterState.score);
                    playerCharacter.setDmgImmune(characterState.dmgImmune);
                    playerCharacter.setFrozen(characterState.frozen);
                    playerCharacter.setKills(characterState.kills);
                }
            }
        }
    }

    private void handleNewPlayerSpawned(Connection connection, Object object) {
        if (object instanceof Network.NewPlayerSpawned) {
            Network.NewPlayerSpawned packet = (Network.NewPlayerSpawned) object;
            //the position generated by the spawn function is for box2d WORLD coordinates so it needs to be converted
            packet.pos = GameWorld.convertWorldToPixels(packet.pos);
            ClientRound.getInstance().setTimePassed(packet.roundTimePassed);
            if (connection.getID() == packet.id) {
                if (GameScreen.getGameStage().getPlayerCharacter() != null)
                    return;
                GameScreen.getGameStage().spawnMyPlayerCharacter(packet);
                GameScreen.getGameStage().getPlayerCharacter().setMyPlayer(true);
                GameScreen.getGameStage().getPlayerCharacter().setId(packet.id);
            } else {
                GameScreen.getGameStage().spawnOtherPlayer(packet);
            }
        }
    }

    private void handleShootProjectile(Connection connection, Object object) {
        if (object instanceof Network.CastSpellProjectile) {
            Network.CastSpellProjectile packet = (Network.CastSpellProjectile) object;

            Vector2 direction = new Vector2((float) Math.cos(packet.rot * Math.PI / 180), (float) Math.sin(packet.rot * Math.PI / 180));
            ClientPlayerCharacter playerCharacter = GameScreen.getGameStage().getOtherPlayers().get(packet.id);
            playerCharacter.getCurrentOrb().castSpellProjectile(direction, packet.rot, packet.id);
            if (playerCharacter.getCurrentOrb().getSpellType() == Orb.SpellType.FROST)
                playerCharacter.hasJustCastFrostProjectile();
            else playerCharacter.hasJustCastLaser();
        }
    }

    private void handlePlantBomb(Connection connection, Object object) {
        if (object instanceof Network.CastBomb) {
            Network.CastBomb packet = (Network.CastBomb) object;

            ClientPlayerCharacter playerCharacter = GameScreen.getGameStage().getOtherPlayers().get(packet.id);
            playerCharacter.getCurrentOrb().castBomb(packet.pos, packet.id);
            if (playerCharacter.getCurrentOrb().getSpellType() == Orb.SpellType.FROST)
                playerCharacter.hasJustCastFrostBomb();
            else playerCharacter.hasJustCastFireBomb();
        }
    }

    private void handlePlayerDisconnected(Connection connection, Object object) {
        if (object instanceof Network.PlayerDisconnected) {
            Network.PlayerDisconnected packet = (Network.PlayerDisconnected) object;

            GameScreen.getGameStage().removePlayerCharacter(packet.id);
        }
    }

    private void handleCurrentMap(Connection connection, Object object) {
        if (object instanceof Network.CurrentMap) {
            Network.CurrentMap packet = (Network.CurrentMap) object;
            if (GameScreen.getGameStage().getGameLevel().getMapNr() == packet.nr)
                return;

            GameScreen.getGameStage().getGameLevel().setMapClient(packet.nr);
            GameScreen.getGameStage().getGameLevel().changeLevel();
        }
    }

    private void handlePlayerDead(Connection connection, Object object) {
        if (object instanceof Network.PlayerDead) {
            Network.PlayerDead packet = (Network.PlayerDead) object;

            if (packet.id == GameClient.getInstance().getID()) {
                Gdx.app.log("game_event", "you died you suck");
            } else {
                Gdx.app.log("game_event", packet.id + " died he sucks");
            }
        }
    }

    private void handleSwitchOrbs(Connection connection, Object object) {
        if (object instanceof Network.SwitchOrbs) {
            Network.SwitchOrbs packet = (Network.SwitchOrbs) object;

            GameScreen.getGameStage().getOtherPlayers().get(packet.id).switchMyOrbs();
        }
    }

    private void handleMoveKeyDown(Connection connection, Object object) {
        if (object instanceof Network.MoveKeyDown) {
            Network.MoveKeyDown packet = (Network.MoveKeyDown) object;

            GameScreen.getGameStage().getOtherPlayers().get(packet.playerId).startMoving(packet.keycode);
        }
    }

    private void handleMoveKeyUp(Connection connection, Object object) {
        if (object instanceof Network.MoveKeyUp) {
            Network.MoveKeyUp packet = (Network.MoveKeyUp) object;

            GameScreen.getGameStage().getOtherPlayers().get(packet.playerId).stopMoving(packet.keycode);
        }
    }

    private ClientPlayerCharacter getPlayerCharacterById(int connectionId, int packetId) {
        ClientPlayerCharacter playerCharacter;
        if (packetId == connectionId) {
            playerCharacter = GameScreen.getGameStage().getPlayerCharacter();
        } else {
            playerCharacter = GameScreen.getGameStage().getOtherPlayers().get(packetId);
        }

        return playerCharacter;
    }
}

