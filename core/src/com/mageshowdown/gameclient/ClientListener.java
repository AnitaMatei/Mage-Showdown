package com.mageshowdown.gameclient;

import com.badlogic.gdx.math.Vector2;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.mageshowdown.gamelogic.GameScreen;
import com.mageshowdown.gamelogic.GameWorld;
import com.mageshowdown.gamelogic.Orb;
import com.mageshowdown.packets.Network;

public class ClientListener extends Listener {

    private GameClient myClient = GameClient.getInstance();

    @Override
    public void connected(Connection connection) {
    }

    @Override
    public void received(Connection connection, Object object) {
        handleLoginServerRequest(connection, object);
        handleNewPlayerSpawned(connection, object);
        handleUpdateCharacterStates(connection, object);
        handleShootProjectile(connection, object);
        handlePlayerDisconnected(connection, object);
        handleCurrentMap(connection, object);
        handlePlayerDead(connection, object);
        handleSwitchOrbs(connection, object);
        handlePlantBomb(connection,object);
    }

    private void handleLoginServerRequest(Connection connection, Object object) {
        if (object instanceof Network.LoginRequest && !myClient.isLogged()) {
            Network.LoginRequest packet = ((Network.LoginRequest) object);
            System.out.println("received login request!");
            packet.user = myClient.getUserName();
            myClient.setLogged(true);
            myClient.sendTCP(packet);
        }
    }

    private void handleUpdateCharacterStates(Connection connection, Object object) {
        if (object instanceof Network.CharacterStates) {
            Network.CharacterStates packet = ((Network.CharacterStates) object);
            /*
             * In order to make sure the box2d world doesnt get locked when we synchronize the
             * velocity and position of a body, we have to queue these assignments
             * and do them after the world has stepped;
             */
            for (Network.OneCharacterState characterState : packet.playerStates) {
                ClientPlayerCharacter playerCharacter;
                //if the character is mine i update my position
                if (characterState.id == connection.getID()) {
                    playerCharacter = GameScreen.getInstance().getGameStage().getPlayerCharacter();
                } else {
                    playerCharacter = GameScreen.getInstance().getGameStage().getOtherPlayers().get(characterState.id);
                }
                if(playerCharacter!=null){
                    //if the player wasnt frozen before and now is means they just became that way
                    if(!playerCharacter.isFrozen() && characterState.frozen)
                        playerCharacter.hasJustFrozen();

                    playerCharacter.setQueuedPos(characterState.pos);
                    playerCharacter.setQueuedVel(characterState.linVel);
                    playerCharacter.setHealth(characterState.health);
                    playerCharacter.setEnergyShield(characterState.energyShield);
                    playerCharacter.setScore(characterState.score);
                    playerCharacter.setDmgImmune(characterState.dmgImmune);
                    playerCharacter.setFrozen(characterState.frozen);
                    playerCharacter.setKills(characterState.kills);
                }
            }
        }
    }

    private void handleNewPlayerSpawned(Connection connection, Object object) {
        if (object instanceof Network.NewPlayerSpawned) {
            Network.NewPlayerSpawned packet = (Network.NewPlayerSpawned) object;
            //the position generated by the spawn function is for box2d world coordinates so it needs to be converted
            packet.pos = GameWorld.convertWorldToPixels(packet.pos);
            ClientRound.getInstance().setTimePassed(packet.roundTimePassed);
            if (connection.getID() == packet.id) {
                if(GameScreen.getInstance().getGameStage().getPlayerCharacter()!=null)
                    return;
                System.out.println("spwaning myself");
                GameScreen.getInstance().getGameStage().spawnMyPlayerCharacter(packet);
                GameScreen.getInstance().getGameStage().getPlayerCharacter().setMyPlayer(true);
                GameScreen.getInstance().getGameStage().getPlayerCharacter().setId(packet.id);
            } else {
                GameScreen.getInstance().getGameStage().spawnOtherPlayer(packet);
            }
        }
    }

    private void handleShootProjectile(Connection connection, Object object) {
        if (object instanceof Network.CastSpellProjectile) {
            Network.CastSpellProjectile packet = (Network.CastSpellProjectile) object;

            Vector2 direction = new Vector2((float)Math.cos(packet.rot*Math.PI/180),(float)Math.sin(packet.rot*Math.PI/180));
            ClientPlayerCharacter playerCharacter=GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.id);
            playerCharacter.getCurrentOrb().castSpellProjectile(direction, packet.rot, packet.id);
            if(playerCharacter.getCurrentOrb().getSpellType()==Orb.SpellType.FROST)
                playerCharacter.hasJustCastFrostProjectile();
            else playerCharacter.hasJustCastLaser();
        }
    }

    private void handlePlantBomb(Connection connection, Object object){
        if(object instanceof Network.CastBomb){
            Network.CastBomb packet=(Network.CastBomb)object;

            ClientPlayerCharacter playerCharacter=GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.id);
            playerCharacter.getCurrentOrb().castBomb(packet.pos,packet.id);
            if(playerCharacter.getCurrentOrb().getSpellType()==Orb.SpellType.FROST)
                playerCharacter.hasJustCastFrostBomb();
            else playerCharacter.hasJustCastFireBomb();
        }
    }

    private void handlePlayerDisconnected(Connection connection, Object object) {
        if (object instanceof Network.PlayerDisconnected) {
            Network.PlayerDisconnected packet = (Network.PlayerDisconnected) object;

            GameScreen.getInstance().getGameStage().removePlayerCharacter(packet.id);
        }
    }

    private void handleCurrentMap(Connection connection, Object object) {
        if (object instanceof Network.CurrentMap) {
            Network.CurrentMap packet = (Network.CurrentMap) object;
            if(GameScreen.getInstance().getGameStage().getGameLevel().getMapNr()==packet.nr)
                return;

            GameScreen.getInstance().getGameStage().getGameLevel().setMapClient(packet.nr);
            GameScreen.getInstance().getGameStage().getGameLevel().changeLevel();
        }
    }

    private void handlePlayerDead(Connection connection, Object object) {
        if (object instanceof Network.PlayerDead) {
            Network.PlayerDead packet = (Network.PlayerDead) object;

            if (packet.id == GameClient.getInstance().getID()) {
                System.out.println("you died you suck");
            } else {
                System.out.println(packet.id + " died he sucks");
            }
        }
    }

    private void handleSwitchOrbs(Connection connection, Object object) {
        if (object instanceof Network.SwitchOrbs) {
            Network.SwitchOrbs packet = (Network.SwitchOrbs) object;

            GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.id).switchMyOrbs();
        }
    }
}

