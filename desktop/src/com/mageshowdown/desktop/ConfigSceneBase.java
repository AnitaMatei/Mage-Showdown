package com.mageshowdown.desktop;

import java.lang.*;
import java.util.ArrayList;

import com.badlogic.gdx.Graphics;
import com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Font;

import static com.mageshowdown.gameclient.ClientAssetLoader.prefs;

class ConfigSceneBase extends AnchorPane {

    private static final ConfigSceneBase INSTANCE = new ConfigSceneBase();

    static ChoiceBox<String> modeChoiceBox;
    static ChoiceBox<String> rezChoiceBox;
    private static Button applyButton;
    private static Button cancelButton;
    static CheckBox vsyncCheckBox;
    static CheckBox glCheckBox;
    static TextField backFpsField;
    static TextField foreFpsField;

    private ConfigSceneBase() {

        //autogenerated code
        Label label = new Label();
        modeChoiceBox = new ChoiceBox<String>();
        rezChoiceBox = new ChoiceBox<String>();
        applyButton = new Button();
        cancelButton = new Button();
        Label label0 = new Label();
        Label label1 = new Label();
        vsyncCheckBox = new CheckBox();
        glCheckBox = new CheckBox();
        backFpsField = new TextField();
        foreFpsField = new TextField();
        Label label2 = new Label();

        //hand-written code

        widgetSetup();
        eventHandling();

        //autogenerated code
        setPrefHeight(400.0);
        setPrefWidth(835.0);

        label.setLayoutX(401.0);
        label.setLayoutY(204.0);
        label.setText("BackgroundFPS");

        modeChoiceBox.setLayoutX(296.0);
        modeChoiceBox.setLayoutY(73.0);
        modeChoiceBox.setPrefHeight(25.0);
        modeChoiceBox.setPrefWidth(244.0);

        rezChoiceBox.setLayoutX(283.0);
        rezChoiceBox.setLayoutY(34.0);
        rezChoiceBox.setPrefHeight(25.0);
        rezChoiceBox.setPrefWidth(269.0);

        applyButton.setLayoutX(628.0);
        applyButton.setLayoutY(356.0);
        applyButton.setMnemonicParsing(false);
        applyButton.setPrefHeight(30.0);
        applyButton.setPrefWidth(90.0);
        applyButton.setText("OK");

        cancelButton.setLayoutX(731.0);
        cancelButton.setLayoutY(356.0);
        cancelButton.setMnemonicParsing(false);
        cancelButton.setPrefHeight(30.0);
        cancelButton.setPrefWidth(90.0);
        cancelButton.setText("Cancel");

        label0.setLayoutX(210.0);
        label0.setLayoutY(29.0);
        label0.setPrefHeight(36.0);
        label0.setPrefWidth(68.0);
        label0.setText("Resolution");
        label0.setFont(new Font(14.0));

        label1.setLayoutX(210.0);
        label1.setLayoutY(77.0);
        label1.setText("Display Mode");

        vsyncCheckBox.setLayoutX(210.0);
        vsyncCheckBox.setLayoutY(161.0);
        vsyncCheckBox.setMnemonicParsing(false);
        vsyncCheckBox.setPrefHeight(25.0);
        vsyncCheckBox.setPrefWidth(119.0);
        vsyncCheckBox.setText("Vertical Sync");

        glCheckBox.setLayoutX(210.0);
        glCheckBox.setLayoutY(198.0);
        glCheckBox.setMnemonicParsing(false);
        glCheckBox.setPrefHeight(30.0);
        glCheckBox.setPrefWidth(182.0);
        glCheckBox.setText("UseGL30 (Experimental)");

        backFpsField.setLayoutX(499.0);
        backFpsField.setLayoutY(200.0);
        backFpsField.setPrefHeight(25.0);
        backFpsField.setPrefWidth(83.0);

        foreFpsField.setLayoutX(499.0);
        foreFpsField.setLayoutY(160.0);
        foreFpsField.setPrefHeight(25.0);
        foreFpsField.setPrefWidth(83.0);

        label2.setLayoutX(401.0);
        label2.setLayoutY(164.0);
        label2.setText("ForegroundFPS");

        this.getChildren().addAll(label, modeChoiceBox, rezChoiceBox, applyButton, cancelButton, label0,
                label1, vsyncCheckBox, glCheckBox, backFpsField, foreFpsField, label2);
    }

    private void widgetSetup() {

        ArrayList<Graphics.DisplayMode> optimalDisplayModes = new ArrayList<Graphics.DisplayMode>();
        for (Graphics.DisplayMode each : LwjglApplicationConfiguration.getDisplayModes()) {
            float aspectNum = ((float) each.width / (float) each.height) * 9f;
            if (each.width >= 1280 && each.height >= 720 && aspectNum >= 15.9f && aspectNum <= 16.1f)
                optimalDisplayModes.add(each);
        }
        ArrayList<String> strResolutions = new ArrayList<String>();
        for (Graphics.DisplayMode each : optimalDisplayModes) {
            strResolutions.add(each.width + "x" + each.height);
        }
        rezChoiceBox.getItems().setAll(strResolutions);
        modeChoiceBox.getItems().setAll("Fullscreen", "Windowed");


    }

    private void eventHandling() {
        applyButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String[] str = rezChoiceBox.getValue().split("x");
                prefs.putString("width", str[0]);
                prefs.putString("height", str[1]);
                if (modeChoiceBox.getValue().equals("Fullscreen"))
                    prefs.putBoolean("fullscreen", true);
                else if (modeChoiceBox.getValue().equals("Windowed"))
                    prefs.putBoolean("fullscreen", false);
                prefs.putInteger("foregroundFPS", Integer.parseInt(foreFpsField.getText()));
                prefs.putInteger("backgroundFPS", Integer.parseInt(backFpsField.getText()));
                prefs.putBoolean("vSyncEnabled", vsyncCheckBox.isSelected());
                prefs.putBoolean("useGL30", glCheckBox.isSelected());
                prefs.flush();
                DesktopClientLauncher.mainStage.setScene(DesktopClientLauncher.mainScene);
            }
        });
        cancelButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                DesktopClientLauncher.mainStage.setScene(DesktopClientLauncher.mainScene);
            }
        });
    }

    static ConfigSceneBase getInstance() {
        return INSTANCE;
    }
}
