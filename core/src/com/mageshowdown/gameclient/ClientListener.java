package com.mageshowdown.gameclient;

import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.mageshowdown.gamelogic.GameScreen;
import com.mageshowdown.gamelogic.GameWorld;
import com.mageshowdown.packets.Network;

public class ClientListener extends Listener {

    private GameClient myClient = GameClient.getInstance();

    @Override
    public void connected(Connection connection) {
    }

    @Override
    public void received(Connection connection, Object object) {
        handleLoginServerRequest(connection, object);
        handleNewPlayerSpawned(connection, object);
        handleUpdateCharacterStates(connection, object);
        handleShootProjectile(connection, object);
        handleProjectileCollided(connection, object);
        handlePlayerDisconnected(connection, object);
        handleCurrentMap(connection, object);
        handlePlayerDead(connection, object);
        handleSwitchWeapons(connection, object);
        handlePlantBomb(connection,object);
    }

    private void handleLoginServerRequest(Connection connection, Object object) {
        if (object instanceof Network.LoginRequest && !myClient.isLogged()) {
            Network.LoginRequest packet = ((Network.LoginRequest) object);
            System.out.println("received login request!");
            packet.user = myClient.getUserName();
            myClient.setLogged(true);
            myClient.sendTCP(packet);
        }
    }

    private void handleUpdateCharacterStates(Connection connection, Object object) {
        if (object instanceof Network.CharacterStates) {
            Network.CharacterStates packet = ((Network.CharacterStates) object);
            /*
             * In order to make sure the box2d world doesnt get locked when we synchronize the
             * velocity and position of a body, we have to queue these assignments
             * and do them after the world has stepped;
             */
            for (Network.OneCharacterState characterState : packet.playerStates) {
                ClientPlayerCharacter playerCharacter;
                //if the character is mine i update my position
                if (characterState.id == connection.getID()) {
                    playerCharacter = GameScreen.getInstance().getGameStage().getPlayerCharacter();
                } else {
                    playerCharacter = GameScreen.getInstance().getGameStage().getOtherPlayers().get(characterState.id);
                }
                if(playerCharacter!=null){
                    playerCharacter.setQueuedPos(characterState.pos);
                    playerCharacter.setQueuedVel(characterState.linVel);
                    playerCharacter.setHealth(characterState.health);
                    playerCharacter.setEnergyShield(characterState.energyShield);
                    playerCharacter.setScore(characterState.score);
                    playerCharacter.setDmgImmune(characterState.dmgImmune);
                    playerCharacter.setFrozen(characterState.frozen);
                    playerCharacter.setKills(characterState.kills);
                }
            }
        }
    }

    private void handleNewPlayerSpawned(Connection connection, Object object) {
        if (object instanceof Network.NewPlayerSpawned) {
            Network.NewPlayerSpawned packet = (Network.NewPlayerSpawned) object;
            //the position generated by the spawn function is for box2d world coordinates so it needs to be converted
            packet.pos = GameWorld.convertWorldToPixels(packet.pos);
            ClientRound.getInstance().setTimePassed(packet.roundTimePassed);
            if (connection.getID() == packet.id) {
                if(GameScreen.getInstance().getGameStage().getPlayerCharacter()!=null)
                    return;
                System.out.println("spwaning myself");
                GameScreen.getInstance().getGameStage().spawnMyPlayerCharacter(packet);
                GameScreen.getInstance().getGameStage().getPlayerCharacter().setMyPlayer(true);
                GameScreen.getInstance().getGameStage().getPlayerCharacter().setId(packet.id);
            } else {
                GameScreen.getInstance().getGameStage().spawnOtherPlayer(packet);
            }
        }
    }

    private void handleShootProjectile(Connection connection, Object object) {
        if (object instanceof Network.ShootProjectile) {
            Network.ShootProjectile packet = (Network.ShootProjectile) object;

            GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.id).getCurrWeapon().shoot(packet.dir, packet.rot, packet.id);
        }
    }

    private void handlePlantBomb(Connection connection, Object object){
        if(object instanceof Network.PlantBomb){
            Network.PlantBomb packet=(Network.PlantBomb)object;

            GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.id).getCurrWeapon().plantBomb(packet.pos,packet.id);
        }
    }

    private void handleProjectileCollided(Connection connection, Object object) {
        if (object instanceof Network.ProjectileCollided) {
            Network.ProjectileCollided packet = (Network.ProjectileCollided) object;

            //if the bullet is the client's player's
            if (packet.ownerId == connection.getID()) {
                GameScreen.getInstance().getGameStage().getPlayerCharacter().getCurrWeapon().ammoHasCollided(packet.projId);
            }
            //if the bullet is some other client's player's
            else {
                GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.ownerId).getCurrWeapon().ammoHasCollided(packet.projId);
            }
        }
    }

    private void handlePlayerDisconnected(Connection connection, Object object) {
        if (object instanceof Network.PlayerDisconnected) {
            Network.PlayerDisconnected packet = (Network.PlayerDisconnected) object;

            GameScreen.getInstance().getGameStage().removePlayerCharacter(packet.id);
        }
    }

    private void handleCurrentMap(Connection connection, Object object) {
        if (object instanceof Network.CurrentMap) {
            Network.CurrentMap packet = (Network.CurrentMap) object;

            GameScreen.getInstance().getGameStage().getGameLevel().setMap(packet.nr);
            GameScreen.getInstance().getGameStage().getGameLevel().changeLevel();
        }
    }

    private void handlePlayerDead(Connection connection, Object object) {
        if (object instanceof Network.PlayerDead) {
            Network.PlayerDead packet = (Network.PlayerDead) object;

            if (packet.id == GameClient.getInstance().getID()) {
                System.out.println("you died you suck");
            } else {
                System.out.println(packet.id + " died he sucks");
            }
        }
    }

    private void handleSwitchWeapons(Connection connection, Object object) {
        if (object instanceof Network.SwitchWeapons) {
            Network.SwitchWeapons packet = (Network.SwitchWeapons) object;

            GameScreen.getInstance().getGameStage().getOtherPlayers().get(packet.id).switchMyWeapons();
        }
    }
}

